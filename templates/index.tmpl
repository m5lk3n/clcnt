<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
  <head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="icon" href="/favicon.ico" type="image/x-icon"/>
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
    <title>{{ .title }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous"/>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" rel="stylesheet"/>
    <style>
      body {
        font-family: "Lucida Console", "Courier New", monospace;
      }
      .input-group-text {
        font-size: 0.8rem; /* override included _input-group.scss default of 1rem as it's too big for the smartphone screen */
      }
    </style>
  </head>
  <body>
    <h4>{{ .header }}</h4>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <!-- ADD -->
    <div class="form-group">
      <div class="input-group mb-3">
        <label class="input-group-text" for="food">Food</label>
        <select id="food" class="form-select" aria-label="Food">
          <option value="Breakfast">Breakfast</option>
          <option value="Lunch">Lunch</option>
          <option value="Dinner">Dinner</option>
          <option disabled>──────────</option>
          <option value="Misc" selected>Misc</option>
        </select>
      </div>

      <div class="input-group mb-3">
        <span class="input-group-text">kcal</span>
        <input id="calories" min="1" max="1500" value="350" type="number" class="form-control" aria-label="Calories"/> <!-- 350 is a more or less arbitrary value -->
      </div>

      <button id="buttonAdd" type="button" class="btn btn-primary">Add</button>
    </div>

    <!-- GET -->
    <hr/>
    <div id="chartCalories" style="width: 400px; height: 120px;"></div>
    <div class="input-group mb-3">
      <span class="input-group-text">Today's kcal in total</span>
      <input readonly id="caloriesToday" type="number" class="form-control" aria-label="Today's calories in total"/>
    </div>
    <div class="input-group mb-3">
      <span class="input-group-text">Last 3 days' kcal in average</span>
      <input readonly id="calories3Days" type="number" class="form-control" aria-label="Last 3 days' calories in average"/>
    </div>
    <div class="input-group mb-3">
      <span class="input-group-text">This week's kcal in average</span>
      <input readonly id="caloriesWeek" type="number" class="form-control" aria-label="This week's calories in average"/>
    </div>
    <div class="input-group mb-3">
      <span class="input-group-text">Daily max. kcal</span>
      <input readonly id="maxCaloriesPerDay" value="1900" type="number" class="form-control" aria-label="Daily calories max."/> <!-- 1900 is my daily max. calories consumption -->
    </div>

    <!-- footer -->
    <hr/>
    <div>
      <small>Made in the Lowlands <span style="color:#ffffcc"><i class="fa-solid fa-umbrella-beach"></i></span>, built on the Mountains <span style="color:white"><i class="fa-solid fa-mountain"></i></span> with <span style="color:red"><i class="fa-solid fa-heart"></i></span> by <img alt="lttl.dev logo" src="https://lttl.dev/v1/images/logo.png" width="90"/>
    </div>

    <!-- toasts, all hidden by default -->
    <div class="position-fixed top-50 start-50 translate-middle p-3" style="z-index: 11">
      <div id="addToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            Entry added. Page will reload shortly...
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    </div>

    <div class="position-fixed top-50 start-50 translate-middle p-3" style="z-index: 11">
      <div id="outOfBoundsToast" class="toast align-items-center text-white bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            Calories are out of bounds! Value has been reset. Please check and add again.
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    </div>

    <div class="position-fixed top-50 start-50 translate-middle p-3" style="z-index: 11">
      <div id="initErrorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            Couldn't initialize calories, see console for details!
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    </div>

    <div class="position-fixed top-50 start-50 translate-middle p-3" style="z-index: 11">
      <div id="addErrorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            Couldn't add entry, see console for details!
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    </div>

    <!-- JS -->
    <script type="text/javascript">
      // HTTP-GETs the (average) calories for the given days and sets the corresponding readonly input fields 
      function initCalories(days, id) { // don't make async: 1. this is supposed to run on the same server and 2. to have values for the charts to init. (see below)
        fetch("/api/v1/calories?days=" + days, {
          headers: {'Content-Type': 'application/json'}
        }).then((res) => {
          if(res.status != 200) {
            console.log("Initializing calories failed with response: ", res);
            showToast("initErrorToast");
          } else {
            return res.json().then(data => {
              if(data.avg_calories) {
                document.getElementById(id).value = data.avg_calories;
              }
            });
          }
        }).catch((error) => {
          console.log("Initializing calories failed with error: ", error);
          showToast("initErrorToast");
        });
      }

      // Pre-selects input field for food based upon hour of the day
      function initFood() {
        const now = new Date();
        let h = now.getHours();
        switch(true) {
          case (h>5 && h<11):
            document.getElementById("food").value = "Breakfast";
            break;
          case (h>10 && h<14):
            document.getElementById("food").value = "Lunch";
            break;
          case(h>16 && h<21):
            document.getElementById("food").value = "Dinner";
            break;
        }
        // default is "Misc" as per 'selected' above
      }

      function initInputs() {
        initFood();

        initCalories(1,"caloriesToday");
        initCalories(3,"calories3Days");
        initCalories(7,"caloriesWeek");
      }

      // Checks whether or not calories are within input type number's min and max
      // (for some reason, this isn't enforced properly by the HTML component)
      function isInbounds(cal) {
        val = parseInt(cal.value, 10); // parseInt is required to make sure that we're comparing numbers here
        if(isNaN(val)){ // Firefox allows characters to be entered in a number input field, so let's deal with it...
          cal.value = 350; // fallback value, 350 -> see above
          return false;
        }
        min = parseInt(cal.min, 10);
        max = parseInt(cal.max, 10);
        switch(true) {
          case (val < min):
            cal.value = min;
            return false;
          case (val > max):
            cal.value = max;
            return false;
        }
        return true;
      }

      function showToast(elementId) {
        var elementToast = document.getElementById(elementId);
        if (elementToast) {
          bootstrap.Toast.getOrCreateInstance(elementToast).show();
        }
      }

      function registerHandleAdd() {
        document.getElementById("buttonAdd").addEventListener("click", handleAdd);
      }

      function unregisterHandleAdd() {
        document.getElementById("buttonAdd").removeEventListener("click", handleAdd);
      }

      // Handles Add button press
      function handleAdd(event) {
        unregisterHandleAdd();

        calElement = document.getElementById("calories");
        if (!isInbounds(calElement)) {
          showToast("outOfBoundsToast");
          registerHandleAdd();
          return false;
        }

        food = document.getElementById("food").value;
        cal = calElement.value;

        fetch("/api/v1/entry/" + food + "/" + cal, {
          method: "POST",
          headers: {'Content-Type': 'application/json'}
        })
        .then(res => {
          if(res.status == 200) {
            showToast("addToast");
            setTimeout(function() {
              location.reload(); // force page update
            }, 1500);
          } else {
            console.log("Add failed with response: ", res);
            showToast("addErrorToast");
            registerHandleAdd();
          }
        })
        .catch((error) => {
            console.log("Add failed with error: ", error);
            showToast("addErrorToast");
            registerHandleAdd();
        });
      }

      registerHandleAdd();

      // -- CHART section start --
      google.charts.load('current', {'packages':['gauge']});
      google.charts.setOnLoadCallback(init);

      function init() {
        // init. charts
        const calData = google.visualization.arrayToDataTable([
          ['Label', 'Value'],
          ['Today in %', 0],
          ['3 Days in %', 0],
          ['Week in %', 0]
        ]);
        const chartOptions = {
          width: 400, height: 120,
          redFrom: 90, redTo: 100,
          yellowFrom: 63, yellowTo: 90, // 1200 are ~63% of max. daily of 1900, i.e. let's target a saving of 700 per day = 1kg loss in 10 days (~7000 saved calories are ~1kg loss)
          minorTicks: 5
        };
        const chart = new google.visualization.Gauge(document.getElementById("chartCalories"));
        chart.draw(calData, chartOptions); // by drawing the charts with initial 0 values (see calData above) we get a nice animation later when feeding the actual values

        initInputs();

        // update charts to show actual values, give it a second and a half to retrieve and init. values from server
        setTimeout(function() {
          const maxCaloriesPerDay = document.getElementById("maxCaloriesPerDay").value;
          const caloriesToday = document.getElementById("caloriesToday").value;
          const calories3Days = document.getElementById("calories3Days").value;
          const caloriesWeek = document.getElementById("caloriesWeek").value;
          calData.setValue(0, 1, Math.round(100*caloriesToday/maxCaloriesPerDay));
          calData.setValue(1, 1, Math.round(100*calories3Days/maxCaloriesPerDay));
          calData.setValue(2, 1, Math.round(100*caloriesWeek/maxCaloriesPerDay));
          chart.draw(calData, chartOptions);
        }, 1500);
      }
      // -- CHART section end --
    </script>
  </body>
</html>
